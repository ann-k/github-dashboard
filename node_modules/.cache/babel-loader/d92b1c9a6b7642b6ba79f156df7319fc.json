{"ast":null,"code":"var _jsxFileName = \"/Users/Anna/github/avito-trainee-task/src/Home.js\";\nimport React, { useState } from 'react';\nimport SearchField from './SearchField.js';\nimport ResultList from './ResultList.js';\nimport Paginator from './Paginator.js';\n\nconst axios = require('axios'); //HANDLE NO RESULTS!!!\n//PRELOADER\n//what if no owner photo is provided\n// what new i learned in this project:\n// used hooks for the first time\n// used react router (with nested routes)\n// used axios instead of fetch\n\n\nfunction Home(props) {\n  const defaultQuery = 'stars:>100';\n  const [result, setResult] = useState({\n    repos: []\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [query, _setQuery] = useState('');\n  const queryRef = React.useRef(query);\n\n  function setQuery(data) {\n    queryRef.current = data;\n\n    _setQuery(data);\n  }\n\n  function handlePaginatorClick(pageNumber) {\n    getData(queryRef.current, String(pageNumber));\n    setCurrentPage(pageNumber);\n  }\n\n  function getData(query, page) {\n    const url = `https://api.github.com/search/repositories?q=${query}&sort=stars&order=desc&per_page=10&page=${page}`;\n    const headers = {\n      'Authorization': 'token 29e60afef909b3a9a1af5c6a80daee1da70ea57c'\n    };\n    axios.get(url, {\n      'headers': headers\n    }).then(response => fetchRepos(response.data.items));\n  }\n\n  function fetchRepos(items) {\n    const repos = [];\n    const headers = {\n      'Authorization': 'token 29e60afef909b3a9a1af5c6a80daee1da70ea57c'\n    };\n    items.map((item, index) => {\n      const gatherAdditionalData = async () => {\n        function fetchLastCommitDate() {\n          axios.get(`https://api.github.com/repos/${item.owner.login}/${item.name}/commits`, {\n            'headers': headers\n          });\n        }\n\n        function fetchLanguages() {\n          axios.get(item.languages_url, {\n            'headers': headers\n          });\n        }\n\n        function fetchContributors() {\n          axios.get(item.contributors_url, {\n            'headers': headers\n          });\n        }\n\n        Promise.all([fetchLastCommitDate(), fetchLanguages(), fetchContributors()]).then(function (results) {\n          const dataForLastCommitDate = results[0];\n          const dataForLanguages = results[1];\n          const dataForContributors = results[1];\n          console.log(dataForLastCommitDate);\n          const repo = {\n            name: item.name,\n            stars: item.stargazers_count,\n            url: item.html_url,\n            lastCommitDate: date,\n            languages: languages,\n            ownerName: item.owner.login,\n            ownerPhoto: item.owner.avatar_url,\n            ownerUrl: item.owner.html_url,\n            description: item.description,\n            contributors: contributors\n          };\n          repos.push(repo); // setResult({repos: repos})\n        });\n      }; // const gatherAdditionalData = fetchLastCommitDate(item)\n      // function fetchLastCommitDate(item) {\n      //   const url = `https://api.github.com/repos/${item.owner.login}/${item.name}/commits`\n      //   axios.get(url, { 'headers': headers })\n      //   .then(response => {\n      //     const date = new Date(response.data[0].commit.committer.date).toLocaleDateString()\n      //     fetchLanguages(item, date)\n      //   })\n      // }\n      // function fetchLanguages(item, date) {\n      //   const url = item.languages_url\n      //   axios.get(url, { 'headers': headers })\n      //   .then(languages => fetchContributors(item, date, Object.keys(languages)))\n      // }\n      // function fetchContributors(item, date, languages) {\n      //   const url = item.contributors_url\n      //   axios.get(url, { 'headers': headers })\n      //   .then(response => {\n      //     const neededParametres = ['login', 'contributions']\n      //     let filteredContributors = response.data\n      //     .filter((item, index) => index < 10)\n      //     .map(item => {\n      //       const contributor = {}\n      //       Object.keys(item)\n      //       .filter(key => neededParametres.includes(key))\n      //       .map(key => contributor[key] = item[key])\n      //       return contributor\n      //     })\n      //     combineRepo(item, date, languages, filteredContributors)\n      //   })\n      // }\n      // function combineRepo(item, date, languages, contributors) {\n      //   let repo = {\n      //     name:           item.name,\n      //     stars:          item.stargazers_count,\n      //     url:            item.html_url,\n      //     lastCommitDate: date,\n      //     languages:      languages,\n      //     ownerName:      item.owner.login,\n      //     ownerPhoto:     item.owner.avatar_url,\n      //     ownerUrl:       item.owner.html_url,\n      //     description:    item.description,\n      //     contributors:   contributors,\n      //   }\n      //   repos.push(repo)\n      //   setResult({repos: repos})\n      //   // if (index + 1 === items.length) {setResult({repos: repos})}\n      // }\n\n    });\n  } // window.addEventListener('load', () => getData(defaultQuery, '1'))\n\n\n  function handleSearch(value) {\n    setQuery(value);\n    value !== '' ? getData(value, '1') : getData(defaultQuery, '1');\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchField, {\n    onInputChange: handleSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ResultList, {\n    repos: result.repos,\n    onResultItemClick: props.onResultItemClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Paginator, {\n    currentPage: currentPage,\n    onPaginatorClick: handlePaginatorClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/Anna/github/avito-trainee-task/src/Home.js"],"names":["React","useState","SearchField","ResultList","Paginator","axios","require","Home","props","defaultQuery","result","setResult","repos","currentPage","setCurrentPage","query","_setQuery","queryRef","useRef","setQuery","data","current","handlePaginatorClick","pageNumber","getData","String","page","url","headers","get","then","response","fetchRepos","items","map","item","index","gatherAdditionalData","fetchLastCommitDate","owner","login","name","fetchLanguages","languages_url","fetchContributors","contributors_url","Promise","all","results","dataForLastCommitDate","dataForLanguages","dataForContributors","console","log","repo","stars","stargazers_count","html_url","lastCommitDate","date","languages","ownerName","ownerPhoto","avatar_url","ownerUrl","description","contributors","push","handleSearch","value","onResultItemClick"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport SearchField from './SearchField.js'\nimport ResultList from './ResultList.js'\nimport Paginator from './Paginator.js'\nconst axios = require('axios')\n\n//HANDLE NO RESULTS!!!\n//PRELOADER\n//what if no owner photo is provided\n// what new i learned in this project:\n// used hooks for the first time\n// used react router (with nested routes)\n// used axios instead of fetch\n\nfunction Home(props) {\n  const defaultQuery = 'stars:>100'\n  const [result, setResult] = useState({repos: []})\n  const [currentPage, setCurrentPage] = useState(1)\n\n  const [query, _setQuery] = useState('')\n  const queryRef = React.useRef(query)\n\n  function setQuery(data) {\n    queryRef.current = data\n    _setQuery(data)\n  }\n\n  function handlePaginatorClick(pageNumber) {\n    getData(queryRef.current, String(pageNumber))\n    setCurrentPage(pageNumber)\n  }\n\n  function getData(query, page) {\n    const url = `https://api.github.com/search/repositories?q=${query}&sort=stars&order=desc&per_page=10&page=${page}`\n    const headers = { 'Authorization' : 'token 29e60afef909b3a9a1af5c6a80daee1da70ea57c' }\n\n    axios.get(url, { 'headers': headers })\n    .then(response => fetchRepos(response.data.items))\n  }\n\n\n\n  function fetchRepos(items) {\n    const repos = []\n    const headers = { 'Authorization' : 'token 29e60afef909b3a9a1af5c6a80daee1da70ea57c' }\n\n    items.map((item, index) => {\n      const gatherAdditionalData = async () => {\n\n        function fetchLastCommitDate() {\n          axios.get(`https://api.github.com/repos/${item.owner.login}/${item.name}/commits`, { 'headers': headers })\n        }\n\n        function fetchLanguages() {\n          axios.get(item.languages_url, { 'headers': headers })\n        }\n\n        function fetchContributors() {\n          axios.get(item.contributors_url, { 'headers': headers })\n        }\n\n        Promise.all([fetchLastCommitDate(), fetchLanguages(), fetchContributors()])\n        .then(function (results) {\n          const dataForLastCommitDate = results[0]\n          const dataForLanguages = results[1]\n          const dataForContributors = results[1]\n          console.log(dataForLastCommitDate);\n\n\n          const repo = {\n            name:           item.name,\n            stars:          item.stargazers_count,\n            url:            item.html_url,\n            lastCommitDate: date,\n            languages:      languages,\n            ownerName:      item.owner.login,\n            ownerPhoto:     item.owner.avatar_url,\n            ownerUrl:       item.owner.html_url,\n            description:    item.description,\n            contributors:   contributors,\n          }\n          repos.push(repo)\n          // setResult({repos: repos})\n        });\n      }\n\n\n\n\n\n      // const gatherAdditionalData = fetchLastCommitDate(item)\n\n      // function fetchLastCommitDate(item) {\n      //   const url = `https://api.github.com/repos/${item.owner.login}/${item.name}/commits`\n      //   axios.get(url, { 'headers': headers })\n      //   .then(response => {\n      //     const date = new Date(response.data[0].commit.committer.date).toLocaleDateString()\n      //     fetchLanguages(item, date)\n      //   })\n      // }\n\n      // function fetchLanguages(item, date) {\n      //   const url = item.languages_url\n      //   axios.get(url, { 'headers': headers })\n      //   .then(languages => fetchContributors(item, date, Object.keys(languages)))\n      // }\n\n      // function fetchContributors(item, date, languages) {\n      //   const url = item.contributors_url\n      //   axios.get(url, { 'headers': headers })\n      //   .then(response => {\n      //     const neededParametres = ['login', 'contributions']\n      //     let filteredContributors = response.data\n      //     .filter((item, index) => index < 10)\n      //     .map(item => {\n      //       const contributor = {}\n      //       Object.keys(item)\n      //       .filter(key => neededParametres.includes(key))\n      //       .map(key => contributor[key] = item[key])\n      //       return contributor\n      //     })\n      //     combineRepo(item, date, languages, filteredContributors)\n      //   })\n      // }\n\n      // function combineRepo(item, date, languages, contributors) {\n      //   let repo = {\n      //     name:           item.name,\n      //     stars:          item.stargazers_count,\n      //     url:            item.html_url,\n      //     lastCommitDate: date,\n      //     languages:      languages,\n      //     ownerName:      item.owner.login,\n      //     ownerPhoto:     item.owner.avatar_url,\n      //     ownerUrl:       item.owner.html_url,\n      //     description:    item.description,\n      //     contributors:   contributors,\n      //   }\n      //   repos.push(repo)\n      //   setResult({repos: repos})\n      //   // if (index + 1 === items.length) {setResult({repos: repos})}\n      // }\n    })\n  }\n\n  // window.addEventListener('load', () => getData(defaultQuery, '1'))\n\n  function handleSearch(value) {\n    setQuery(value);\n    (value !== '') ? getData(value, '1') : getData(defaultQuery, '1')\n  }\n\n  return (\n    <div className='Home'>\n      <SearchField onInputChange={handleSearch} />\n      <ResultList repos={result.repos} onResultItemClick={props.onResultItemClick} />\n      <Paginator currentPage={currentPage} onPaginatorClick={handlePaginatorClick} />\n    </div>\n  )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}