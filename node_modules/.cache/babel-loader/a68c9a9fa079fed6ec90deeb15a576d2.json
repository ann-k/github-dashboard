{"ast":null,"code":"var _jsxFileName = \"/Users/Anna/github/avito-trainee-task/src/Home/Home.js\";\nimport React, { useState, useEffect } from 'react';\nimport SearchField from './SearchField.js';\nimport ResultList from './ResultList.js';\nimport Paginator from './Paginator.js';\n\nconst axios = require('axios');\n\nvar numeral = require('numeral'); // what new stuff i learned in this project:\n// used hooks for the first time (state, effect, ref)\n// used react router (with nested routes)\n// used axios instead of fetch\n// learned about local storage and session storage and how to use them\n// cancel axios request when typing\n// library Numerals js for shortening numbers\n// array.join('/') method\n// slice method on string\n// TO DO\n// local storage page number\n// коммит и публикация на github pages\n// проблема с тем что все загружается в разное время\n\n\nfunction Home(props) {\n  const [result, setResult] = useState({\n    repos: []\n  });\n  const [preloader, setPreloader] = useState(false);\n  const [totalCount, setTotalCount] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const perPage = '10';\n  const defaultQuery = 'stars:>100';\n  const storedQuery = sessionStorage.getItem('query');\n  const [userQuery, setUserQuery] = useState(storedQuery ? storedQuery : defaultQuery);\n\n  function handleSearch(value) {\n    setUserQuery(value);\n    setResult({\n      repos: []\n    });\n    setPreloader(true);\n    setCurrentPage(1);\n    sessionStorage.setItem('query', value);\n  }\n\n  function handlePaginatorClick(pageNumber) {\n    setCurrentPage(pageNumber);\n    setResult({\n      repos: []\n    });\n  } // useEffect(() => {\n  //   const storedQuery = sessionStorage.getItem('query')\n  //   console.log(storedQuery);\n  //   if (storedQuery !== '') setUserQuery(storedQuery)\n  //   // setCurrentPage(sessionStorage.getItem('page').to_i)\n  // }, [])\n  // useEffect(() => {\n  //   sessionStorage.setItem('query', userQuery)\n  //   // sessionStorage.setItem('page', String(currentPage))\n  // }, [userQuery, currentPage])\n  // ЕЩЕ НОМЕР СТРАНИЦЫ\n  // useEffect(() => {\n  //   setPreloader(true)\n  //\n  //   const query = (userQuery !== '') ? userQuery : defaultQuery\n  //   const url = `https://api.github.com/search/repositories?q=${query}&sort=stars&order=desc&per_page=${perPage}&page=${currentPage}`\n  //   const headers = { 'Authorization' : 'token 29e60afef909b3a9a1af5c6a80daee1da70ea57c' }\n  //   let cancel\n  //\n  //   axios.get(url, {\n  //     headers: headers,\n  //     cancelToken: new axios.CancelToken(c => cancel = c)\n  //   })\n  //   .then(response => {\n  //     setTotalCount(response.data.total_count)\n  //     const items = response.data.items\n  //     const repos = []\n  //     const headers = { 'Authorization' : 'token 29e60afef909b3a9a1af5c6a80daee1da70ea57c' }\n  //\n  //     items.map((item, index) => {\n  //       function fetchAdditionalData() {\n  //         function fetchLastCommitDate() {\n  //           return axios.get(`https://api.github.com/repos/${item.owner.login}/${item.name}/commits`, { 'headers': headers })\n  //         }\n  //\n  //         function fetchLanguages() {\n  //           return axios.get(item.languages_url, { 'headers': headers })\n  //         }\n  //\n  //         function fetchContributors() {\n  //           return axios.get(item.contributors_url, { 'headers': headers })\n  //         }\n  //\n  //         Promise.all([fetchLastCommitDate(), fetchLanguages(), fetchContributors()])\n  //         .then(function (results) {\n  //           const [commitsData, languagesData, contributorsData] = results\n  //\n  //           const lastCommitDate = new Date(commitsData.data[0].commit.committer.date).toLocaleDateString()\n  //\n  //           const languages = Object.keys(languagesData.data)\n  //\n  //           const contributors = contributorsData.data\n  //           .filter((c, index) => index < 10)\n  //           .map(c => c.avatar_url)\n  //\n  //           const repo = {\n  //             id:             item.id,\n  //             name:           item.name,\n  //             url:            item.html_url,\n  //             ownerName:      item.owner.login,\n  //             ownerPhoto:     item.owner.avatar_url,\n  //             ownerUrl:       item.owner.html_url,\n  //             description:    item.description,\n  //             stars:          numeral(item.stargazers_count).format('0 a'),\n  //             lastCommitDate: lastCommitDate,\n  //             languages:      languages,\n  //             contributors:   contributors,\n  //           }\n  //\n  //           repos[index] = repo\n  //           setResult({repos: repos})\n  //           })\n  //         }\n  //       fetchAdditionalData()\n  //     })\n  //   })\n  //   .catch(e => {\n  //     if (axios.isCancel(e)) return\n  //   })\n  //   .then(() => setPreloader(false))\n  //   return () => cancel()\n  // }, [userQuery, currentPage])\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchField, {\n    userQuery: userQuery,\n    storedQuery: storedQuery,\n    onInputChange: handleSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ResultList, {\n    repos: result.repos,\n    preloader: preloader,\n    totalCount: totalCount,\n    userQuery: userQuery,\n    defaultQuery: defaultQuery,\n    onResultItemClick: props.onResultItemClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Paginator, {\n    currentPage: currentPage,\n    preloader: preloader,\n    totalCount: totalCount,\n    perPage: perPage,\n    userQuery: userQuery,\n    onPaginatorClick: handlePaginatorClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/Anna/github/avito-trainee-task/src/Home/Home.js"],"names":["React","useState","useEffect","SearchField","ResultList","Paginator","axios","require","numeral","Home","props","result","setResult","repos","preloader","setPreloader","totalCount","setTotalCount","currentPage","setCurrentPage","perPage","defaultQuery","storedQuery","sessionStorage","getItem","userQuery","setUserQuery","handleSearch","value","setItem","handlePaginatorClick","pageNumber","onResultItemClick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport SearchField from './SearchField.js'\nimport ResultList from './ResultList.js'\nimport Paginator from './Paginator.js'\nconst axios = require('axios')\nvar numeral = require('numeral')\n\n// what new stuff i learned in this project:\n// used hooks for the first time (state, effect, ref)\n// used react router (with nested routes)\n// used axios instead of fetch\n// learned about local storage and session storage and how to use them\n// cancel axios request when typing\n// library Numerals js for shortening numbers\n// array.join('/') method\n// slice method on string\n\n// TO DO\n// local storage page number\n// коммит и публикация на github pages\n// проблема с тем что все загружается в разное время\n\nfunction Home(props) {\n  const [result, setResult] = useState({repos: []})\n  const [preloader, setPreloader] = useState(false)\n\n  const [totalCount, setTotalCount] = useState(0)\n  const [currentPage, setCurrentPage] = useState(1)\n  const perPage = '10'\n\n  const defaultQuery = 'stars:>100'\n  const storedQuery = sessionStorage.getItem('query')\n  const [userQuery, setUserQuery] = useState(storedQuery ? storedQuery : defaultQuery)\n\n  function handleSearch(value) {\n    setUserQuery(value)\n    setResult({repos: []})\n    setPreloader(true)\n    setCurrentPage(1)\n    sessionStorage.setItem('query', value)\n  }\n\n  function handlePaginatorClick(pageNumber) {\n    setCurrentPage(pageNumber)\n    setResult({repos: []})\n  }\n\n  // useEffect(() => {\n  //   const storedQuery = sessionStorage.getItem('query')\n  //   console.log(storedQuery);\n  //   if (storedQuery !== '') setUserQuery(storedQuery)\n  //   // setCurrentPage(sessionStorage.getItem('page').to_i)\n  // }, [])\n\n  // useEffect(() => {\n  //   sessionStorage.setItem('query', userQuery)\n  //   // sessionStorage.setItem('page', String(currentPage))\n  // }, [userQuery, currentPage])\n  // ЕЩЕ НОМЕР СТРАНИЦЫ\n\n  // useEffect(() => {\n  //   setPreloader(true)\n  //\n  //   const query = (userQuery !== '') ? userQuery : defaultQuery\n  //   const url = `https://api.github.com/search/repositories?q=${query}&sort=stars&order=desc&per_page=${perPage}&page=${currentPage}`\n  //   const headers = { 'Authorization' : 'token 29e60afef909b3a9a1af5c6a80daee1da70ea57c' }\n  //   let cancel\n  //\n  //   axios.get(url, {\n  //     headers: headers,\n  //     cancelToken: new axios.CancelToken(c => cancel = c)\n  //   })\n  //   .then(response => {\n  //     setTotalCount(response.data.total_count)\n  //     const items = response.data.items\n  //     const repos = []\n  //     const headers = { 'Authorization' : 'token 29e60afef909b3a9a1af5c6a80daee1da70ea57c' }\n  //\n  //     items.map((item, index) => {\n  //       function fetchAdditionalData() {\n  //         function fetchLastCommitDate() {\n  //           return axios.get(`https://api.github.com/repos/${item.owner.login}/${item.name}/commits`, { 'headers': headers })\n  //         }\n  //\n  //         function fetchLanguages() {\n  //           return axios.get(item.languages_url, { 'headers': headers })\n  //         }\n  //\n  //         function fetchContributors() {\n  //           return axios.get(item.contributors_url, { 'headers': headers })\n  //         }\n  //\n  //         Promise.all([fetchLastCommitDate(), fetchLanguages(), fetchContributors()])\n  //         .then(function (results) {\n  //           const [commitsData, languagesData, contributorsData] = results\n  //\n  //           const lastCommitDate = new Date(commitsData.data[0].commit.committer.date).toLocaleDateString()\n  //\n  //           const languages = Object.keys(languagesData.data)\n  //\n  //           const contributors = contributorsData.data\n  //           .filter((c, index) => index < 10)\n  //           .map(c => c.avatar_url)\n  //\n  //           const repo = {\n  //             id:             item.id,\n  //             name:           item.name,\n  //             url:            item.html_url,\n  //             ownerName:      item.owner.login,\n  //             ownerPhoto:     item.owner.avatar_url,\n  //             ownerUrl:       item.owner.html_url,\n  //             description:    item.description,\n  //             stars:          numeral(item.stargazers_count).format('0 a'),\n  //             lastCommitDate: lastCommitDate,\n  //             languages:      languages,\n  //             contributors:   contributors,\n  //           }\n  //\n  //           repos[index] = repo\n  //           setResult({repos: repos})\n  //           })\n  //         }\n  //       fetchAdditionalData()\n  //     })\n  //   })\n  //   .catch(e => {\n  //     if (axios.isCancel(e)) return\n  //   })\n  //   .then(() => setPreloader(false))\n  //   return () => cancel()\n  // }, [userQuery, currentPage])\n\n  return (\n    <div className='Home'>\n      <SearchField userQuery={userQuery}\n                   storedQuery={storedQuery}\n                   onInputChange={handleSearch} />\n\n      <ResultList repos={result.repos}\n                  preloader={preloader}\n                  totalCount={totalCount}\n                  userQuery={userQuery}\n                  defaultQuery={defaultQuery}\n                  onResultItemClick={props.onResultItemClick} />\n\n      <Paginator currentPage={currentPage}\n                 preloader={preloader}\n                 totalCount={totalCount}\n                 perPage={perPage}\n                 userQuery={userQuery}\n                 onPaginatorClick={handlePaginatorClick} />\n    </div>\n  )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}